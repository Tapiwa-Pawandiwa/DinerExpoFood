type FavoriteHost @model @auth(rules: [{allow: public}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}]) {
  id: ID!
  hostID: ID! @index(name: "byHost")
  customerID: ID! @index(name: "byCustomer")
}

type FavoriteMeal @model @auth(rules: [{allow: public}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}, {allow: owner}]) {
  id: ID!
  customerID: ID! @index(name: "byCustomer")
  mealID: ID! @index(name: "byMeal")
}

type BasketMeal @model @auth(rules: [{allow: public}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}, {allow: private, provider: iam}, {allow: owner}]) {
  id: ID!
  quantity: Int!
  basketID: ID! @index(name: "byBasket")
  mealID: ID! @index(name: "byMeal")
}

type Basket @model @auth(rules: [{allow: public}, {allow: private, provider: iam}, {allow: public, provider: iam}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}, {allow: owner}]) {
  id: ID!
  BasketMeals: [BasketMeal] @hasMany(indexName: "byBasket", fields: ["id"])
  customerID: ID! @index(name: "byCustomer")
}

enum OrderStatus {
  NEW
  COMPLETE
}

type OrderMeal @model @auth(rules: [{allow: public}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}, {allow: owner}, {allow: public, provider: iam}]) {
  id: ID!
  quantity: Int!
  orderID: ID! @index(name: "byOrder")
  mealID: ID! @index(name: "byMeal")
}

type Order @model @auth(rules: [{allow: public}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}, {allow: owner}]) {
  id: ID!
  customerID: ID! @index(name: "byCustomer")
  total: Float!
  status: OrderStatus!
  OrderMeals: [OrderMeal] @hasMany(indexName: "byOrder", fields: ["id"])
  request: String
}

type FeaturedHost @model @auth(rules: [{allow: public}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}, {allow: owner}]) {
  id: ID!
  Host: Host @hasOne
}

type FeaturedMeal @model @auth(rules: [{allow: public}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}, {allow: public, provider: iam}]) {
  id: ID!
  Meal: Meal @hasOne
}

type Category @model @auth(rules: [{allow: public}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}, {allow: private, provider: iam}]) {
  id: ID!
  name: String!
  meals: [Meal] @manyToMany(relationName: "MealCategory")
  image: String
  featured: Boolean
  featuredCountry: Boolean
  isCountry: Boolean
  isDiet: Boolean
  isRegion: Boolean
  isStyle: Boolean
  isPopular: Boolean
}

type Reservation @model @auth(rules: [{allow: public}]) {
  id: ID!
  customerID: ID! @index(name: "byCustomer")
  hostID: ID! @index(name: "byHost")
  Order: Order @hasOne
}

type Meal @model @auth(rules: [{allow: public}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}, {allow: public, provider: iam}]) {
  id: ID!
  hostID: ID! @index(name: "byHost")
  Categories: [Category] @manyToMany(relationName: "MealCategory")
  name: String!
  description: String!
  imageURI: String!
  price: Float!
  plates: Int!
  time: AWSTime!
  date: AWSDate!
  allergens: [String]
  ingredients: [String]
  tags: [String]
  available: Boolean
  OrderMeal: [OrderMeal] @hasMany(indexName: "byMeal", fields: ["id"])
  BasketMeals: [OrderMeal] @hasMany(indexName: "byMeal", fields: ["id"])
  FavoriteMeals: [OrderMeal] @hasMany(indexName: "byMeal", fields: ["id"])
}

type Customer @model @auth(rules: [{allow: public}, {allow: public, provider: iam}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}]) {
  id: ID!
  Reservations: [FavoriteMeal] @hasMany(indexName: "byCustomer", fields: ["id"])
  first_name: String!
  last_name: String!
  email: String!
  imageURI: String
  address: String
  lat: Float
  lng: Float
  phone: AWSPhone
  Orders: [FavoriteMeal] @hasMany(indexName: "byCustomer", fields: ["id"])
  Baskets: [FavoriteMeal] @hasMany(indexName: "byCustomer", fields: ["id"])
  FavoriteMeals: [FavoriteMeal] @hasMany(indexName: "byCustomer", fields: ["id"])
  FavoriteHosts: [FavoriteMeal] @hasMany(indexName: "byCustomer", fields: ["id"])
}

type Host @model @auth(rules: [{allow: public}, {allow: public, provider: iam}, {allow: groups, groups: ["DinerUsers23"], operations: [read, create, update, delete]}]) {
  id: ID!
  Meals: [Meal] @hasMany(indexName: "byHost", fields: ["id"])
  Reservations: [Meal] @hasMany(indexName: "byHost", fields: ["id"])
  first_name: String!
  last_name: String!
  email: String
  imageURI: String!
  tags: [String]
  description: String!
  country: String!
  address: String!
  lat: Float
  lng: Float
  FavoriteHosts: [Meal] @hasMany(indexName: "byHost", fields: ["id"])
}
 